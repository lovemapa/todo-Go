basePath: /
definitions:
  models.Todo:
    properties:
      name:
        type: string
      user:
        type: string
    required:
    - name
    type: object
  models.User:
    properties:
      ProfilePhoto:
        type: string
      date:
        type: integer
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      mobile:
        type: string
      password:
        type: string
      token:
        type: string
      tokenExpiresAt:
        type: integer
    required:
    - email
    - firstName
    - lastName
    - mobile
    - password
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  termsOfService: http://swagger.io/terms/
  title: TODO APIs
  version: "1.0"
paths:
  /todo/create:
    post:
      consumes:
      - application/json
      description: Add a new Todo
      parameters:
      - description: Todo Data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
      security:
      - JWT: []
      summary: Create Todo
      tags:
      - todo
  /todo/deleteTodo/{todoId}:
    delete:
      description: Delete TODO by ID
      parameters:
      - description: Todo ID
        in: path
        name: todoId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete Todo
      tags:
      - todo
  /todo/getTodo/{todoId}:
    get:
      description: Get a TODO by ID
      parameters:
      - description: Todo ID
        in: path
        name: todoId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get Todo
      tags:
      - todo
  /todo/getTodos:
    get:
      description: Get All TODOs
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Get Todos
      tags:
      - todo
  /todo/updateTodo/{todoId}:
    patch:
      description: Update TODO by ID
      parameters:
      - description: Todo ID
        in: path
        name: todoId
        required: true
        type: string
      - description: Todo Data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Update Todo
      tags:
      - todo
  /user/login:
    post:
      consumes:
      - application/json
      description: Login for User
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserLogin'
      summary: Login
      tags:
      - user
  /user/register:
    post:
      consumes:
      - multipart/form-data
      description: Add a new User
      parameters:
      - in: formData
        name: ProfilePhoto
        type: string
      - in: formData
        name: date
        type: integer
      - in: formData
        name: email
        required: true
        type: string
      - in: formData
        name: firstName
        required: true
        type: string
      - in: formData
        name: id
        type: string
      - in: formData
        name: lastName
        required: true
        type: string
      - in: formData
        name: mobile
        required: true
        type: string
      - in: formData
        name: password
        required: true
        type: string
      - in: formData
        name: token
        type: string
      - in: formData
        name: tokenExpiresAt
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Register User
      tags:
      - user
schemes:
- http
securityDefinitions:
  JWT:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
